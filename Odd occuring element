Find the Number Occurring Odd Number of Times

Given an array of positive integers. All numbers occur even number of times except one number which occurs odd number of times. Find the number in O(n) time & constant space.
Examples :

Input : arr = {1, 2, 3, 2, 3, 1, 3}
Output : 3

Input : arr = {5, 7, 2, 7, 5, 2, 5}
Output : 5

A Simple Solution is to run two nested loops. 
The outer loop picks all elements one by one and inner loop counts number of occurrences of the element picked by outer loop. 
Time complexity of this solution is O(n2).

class OddOccurrence { 
    static int getOdd(int arr[], int arr_size) 
    { 
        int i; 
        for (i = 0; i < arr_size; i++) { 
            int count = 0; 
            for (int j = 0; j < arr_size; j++) { 
                if (arr[i] == arr[j]) 
                    count++; 
            } 
            if (count % 2 != 0) 
                return arr[i]; 
        } 
        return -1; 
    } 
      
    // driver code  
    public static void main(String[] args) 
    { 
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt(); 
        int arr[] = new int[n]; 
        for (int i=0; i<n; i++){
        arr[i] = sc.nextInt();
        }
        System.out.println(getOdd(arr, n)); 
    } 
} 

================================================================================================================
A Better Solution is to use Hashing. Use array elements as key and their counts as value. 
Create an empty hash table. One by one traverse the given array elements and store counts. 
Time complexity of this solution is O(n). But it requires extra space for hashing.


class Solution {
    int getOddOccurrence(int[] arr, int n) {
        HashMap<Integer,Integer> hmap = new HashMap<>(); 
          
        // Putting all elements into the HashMap 
        for(int i = 0; i < n; i++) 
        { 
            if(hmap.containsKey(arr[i])) 
            { 
                int val = hmap.get(arr[i]); 
                          
                // If array element is already present then 
                // increase the count of that element. 
                hmap.put(arr[i], val + 1);  
            } 
            else
                  
                // if array element is not present then put 
                // element into the HashMap and initialize  
                // the count to one. 
                hmap.put(arr[i], 1);  
        } 
    
        for(Integer a:hmap.keySet()) 
        { 
            if(hmap.get(a) % 2 != 0) 
                return a; 
        } 
        return -1; 
    } 
    
}

public static void main(String[] args) 
    { 
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt(); 
        int arr[] = new int[n]; 
        for (int i=0; i<n; i++){
        arr[i] = sc.nextInt();
        }
        System.out.println(getOdd(arr, n)); 
    } 
} 
